ggmap(ydp)
ggmap(ydp)
ydp <- get_googlemap(geo_code, maptype="roadmap")
geo_code <- enc2utf8("영등포역") %>% geocode()
#"영등포역"
library(ggmap)
library(dplyr)
library(ggplot2)
api_key <- "AIzaSyBT0C0HbkIuGiW40mhTwaA36-fERCuvBZM"
register_google(key = api_key)
geo_code <- enc2utf8("영등포역") %>% geocode()
print(geo_code)
x <- c(lon=127, lat=37.5)
ydp <- get_googlemap(geo_code, maptype="roadmap")
ggmap(ydp)
ydp <- get_googlemap("영등포역", maptype="roadmap")
ggmap(ydp)
, zoom=17
api_key <- "AIzaSyBT0C0HbkIuGiW40mhTwaA36-fERCuvBZM"
register_google(key = api_key)
geo_code <- enc2utf8("영등포역") %>% geocode()
print(geo_code)
x <- c(lon=127, lat=37.5)
ydp <- get_googlemap("영등포역", maptype="roadmap"
, zoom=17)
ggmap(ydp)
#"영등포역"
library(ggmap)
library(dplyr)
library(ggplot2)
api_key <- "AIzaSyBT0C0HbkIuGiW40mhTwaA36-fERCuvBZM"
register_google(key = api_key)
geo_code <- enc2utf8("영등포역") %>% geocode()
print(geo_code)
x <- c(lon=127, lat=37.5)
ydp <- get_googlemap("영등포역", maptype="roadmap"
, zoom=17)
ggmap(ydp)
# 서울특별시 영등포구 영등포동
address <- "서울특별시 영등포구 영등포동"
start_location <- geocode(address)
address2 <- "서울특별시 영등포구 여의도동"
end_location <- geocode(address2)
df <- data.frame(
lon = c(start_location$lon, end_location$lon),
lat = c(start_location$lat, end_location$lat)
)
map <- get_map(location = c(start_location$lon, start_location$lat,
end_location$lon, end_location$lat), zoom=13)
ggmap(map) +
geom_path(data = df, aes(x = lon, y = lat), color="red", size=3) +
geom_point(data = start_location,
aes( x = start_location$lon, y = start_location$lat )
, size=7, color="blue") +
geom_point(data = start_location,
aes( x = end_location$lon, y = end_location$lat )
, size=7, color="green")
ggmap(map) +
geom_path(data = df, aes(x = lon, y = lat), color="red", size=3) +
geom_point(data = start_location,
aes( x = start_location$lon, y = start_location$lat )
, size=7, color="blue") +
geom_point(data = start_location,
aes( x = end_location$lon, y = end_location$lat )
, size=7, color="green")
library(readxl)
path <- "C:/KHM/R/code/source/"
path <- "C:/LSY/R/code/source/"
file <- paste0( path, "forest.xls")
forest_data <- read_excel( file )
file <- paste0( path, "forest.xls")
forest_data <- read_excel( file )
forest_data
file <- paste0( path, "forest.xls")
forest_data <- read_excel( file )
forest_data
# 변수명 변경
colnames(forest_data)
colnames(forest_data) <- c("name","city","gubun","area","number"
,"stay","city_new","code","codename")
# 데이터 구조 및 앞부분 확인
str(forest_data)
head(forest_data)
# 시도별 휴양림 빈도 분석 - table() 함수
city_table <- table(forest_data$city)
barplot(city_table)
library(descr)
freq(forest_data$city, plot = T, main = 'city')
library(dplyr)
# 데이터 전체 개수
count(forest_data)
# 시도별 개수
count(forest_data, city)
# 시도별 개수기준, 내림차순
count(forest_data, city) %>% arrange( desc(n) )
# 파이프 연산자 미사용
x <- count(forest_data, city)
arrange( x, desc(n) )
# 시도, 소재지_시도명, 제공기관명 별로 분포 내림차순 정렬
library(dplyr)
count(forest_data, city) %>% arrange( desc(n) )
count(forest_data, city_new) %>% arrange( desc(n) )
count(forest_data, codename) %>% arrange( desc(n) )
library(readxl)
path <- "C:/LSY/R/code/source/"
file <- paste0( path, "entrance.xls")
entrance_data <- read_excel( file )
file <- paste0( path, "entrance.xls")
entrance_data <- read_excel( file )
View(entrance_data)
# 데이터 구조 및 앞부분 확인
str(entrance_data)
head(entrance_data)
# 변수명 영어로 변경
colnames(entrance_data) <- c("country", "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC")
head(entrance_data)
# 국가명 띄어쓰기 제거
# gsub("찾을 문자열", "대체할 문자열", 데이터)
# -문자열 대체 함수
entrance_data$country <- gsub(" ", "", entrance_data$country)
View(entrance_data)
# 국가 개수 확인
count(entrance_data)
# 1월 기준 상위 5개국 추출하기
country_desc <- entrance_data[order(-entrance_data$JAN),]
head( country_desc, n = 5 )
## |> 네이티브 파이프 연산자 사용
top5_country <- entrance_data[order(-entrance_data$JAN),] |> head(n = 5)
library(reshape2)
top5_melt <- melt(top5_country, id.vars='country', variable.name='mon')
head(top5_melt)
View(top5_melt)
library(ggplot2)
ggplot(top5_melt, aes(x = mon, y = value, group = country)) +
geom_line(aes(color = country)) +
ggtitle("2020년 국적별 입국자 수 변화 추이") +
scale_y_continuous(breaks = seq(0, 500000, 50000))
# 2020년 월별 입국자 수 - 막대 그래프
ggplot(top5_melt, aes(x = mon, y = value, fill = country)) +
geom_bar(stat = "identity", position = "dodge") +
ggtitle("2020년 국적별 입국자 수 변화 추이") +
scale_y_continuous(breaks = seq(0, 500000, 50000))
# 2020년 월별 입국자 수 - 누적 막대 그래프
ggplot(top5_melt, aes(x = mon, y = value, fill = country)) +
geom_bar(stat = "identity", position = "stack") +
ggtitle("2020년 국적별 입국자 수 변화 추이") +
scale_y_continuous(breaks = seq(0, 1000000, 50000))
library(readxl)
path <- "C:/LSY/R/code/source/"
file <- paste0(path, "선별진료소.xls")
clinic_data <- read_excel(file)
View(clinic_data)
file <- paste0(path, "선별진료소.xls")
clinic_data <- read_excel(file)
View(clinic_data)
# 필요한 컬럼만 추출하기
data_raw <- clinic_data[,c(2:5)]  # 2~5열의 모든행 선택
head(data_raw)
# 데이터 추출 확인 및 컬럼명 변경
names(data_raw)
# 시도, 시군구, 의료기관명, 주소 -> state, city, name, adrr
names(data_raw) <- c("state", "city", "name", "addr")
names(data_raw)
# 지역별(state) 선별 진료소 빈도 분석
table(data_raw$state)
# 지역별(state) 선별 진료소 빈도 - 막대 그래프
barplot(table(data_raw$state))
# 제주 선별 진료소
jeju_data <- data_raw[data_raw$state == "제주",]
head(jeju_data)
nrow(jeju_data)
library(ggmap)
api_key <- "AIzaSyDa_9XcZixmykF2y95JyJCZravaIvqdPPU"
register_google(api_key)
# mutate_geocode()
# - 데이터 세트의 주소를 기준으로 위도(lat),경도(lon)를 추가하는 함수
jeju_data <- mutate_geocode(data=jeju_data, location=addr, source='google')
View(jeju_data)
# 제주 선별 진료소 지도 시각화 - 산점도로 표시
jeju_map <- get_googlemap('제주', maptype = 'roadmap', zoom = 11)
ggmap(jeju_map) +
geom_point(data = jeju_data, aes( x = lon, y = lat, color = factor(name)), size = 10)
# 제주 선별 진료소 지도 시각화 - 구글 마커로 표시
# - 데이터 세트에서 위도,경도를 마커 옵션으로 지정
# - 마커 정도 : 데이터 프레임 (경도, 위도)
jeju_marker <- data.frame(jeju_data$lon, jeju_data$lat)
jeju_map <- get_googlemap('제주', maptype = 'roadmap', zoom = 11,
markers = jeju_marker)
ggmap(jeju_map) +
geom_text(data = jeju_data, aes(x = lon, y = lat),
size = 8, label = jeju_data$name, col="blue" )
# 제주 선별 진료소 지도 시각화 - 구글 마커로 표시
# - 데이터 세트에서 위도,경도를 마커 옵션으로 지정
# - 마커 정도 : 데이터 프레임 (경도, 위도)
jeju_marker <- data.frame(jeju_data$lon, jeju_data$lat)
jeju_map <- get_googlemap('제주', maptype = 'roadmap', zoom = 11,
markers = jeju_marker)
ggmap(jeju_map) +
geom_text(data = jeju_data, aes(x = lon, y = lat),
size = 8, label = jeju_data$name, col="blue" )
# 제주 선별 진료소 지도 시각화 - 구글 마커로 표시
# - 데이터 세트에서 위도,경도를 마커 옵션으로 지정
# - 마커 정도 : 데이터 프레임 (경도, 위도)
jeju_marker <- data.frame(jeju_data$lon, jeju_data$lat)
jeju_map <- get_googlemap('제주', maptype = 'roadmap', zoom = 11,
markers = jeju_marker)
library(readxl)
path <- "C:/LSY/R/code/source/"
file <- paste0(path, "dust.xlsx")
dust_data <- read_excel(file)
head(dust_data)
path <- "C:/LSY/R/code/source/"
file <- paste0(path, "dust.xlsx")
dust_data <- read_excel(file)
head(dust_data)
file <- paste0(path, "dust.xlsx")
dust_data <- read_excel(file)
dust_data <- read_excel(file)
head(dust_data)
library(dplyr)
dust_data_select <- dust_data[,c("날짜","성북구","중구")]
View(dust_data_select)
# 결측치 확인
is.na( dust_data_select )         # TRUE : 결측치
sum( is.na( dust_data_select ) )  # 결측치 개수
library(psych)
describe( dust_data_select$성북구 )
describe( dust_data_select$중구 )
# 미세먼지 단위 : 마이크로 그램 (㎍/m3)
# 1g = 1000mg
# 1mg = 1000㎍
# 1㎍ = 0.0000001g
# 40㎍ = 0.000004g
# 성북구와 중구 미세먼지 농도 상자 그림 그리기
boxplot( dust_data_select$성북구, dust_data_select$중구,
main = "finedust", xlab = "AREA", names = c("성북구", "중구"),
ylab = "FINEDUST_PM", col = c("blue", "green"))
# 지역별 미세먼지 농도 분산 차이 검정하기
var.test( dust_data_select$중구, dust_data_select$성북구 )
# 지역별 평균 차이 검정하기
t.test( dust_data_select$중구, dust_data_select$성북구, var.equal = T )
### 방법 1
# 오라클 DB 연결
install.packages("DBI")
install.packages("ROracle")  # R 4.0.0 버전 까지 지원
library(DBI)
library(ROracle)
install.packages("ROracle")  # R 4.0.0 버전 까지 지원
library(ROracle)
install.packages("ROracle")  # R 4.0.0 버전 까지 지원
# 오라클 DB 연결 정보 : url, 계정명, 비밀번호
driver <- dbDriver("Oracle")
install.packages("ROracle")  # R 4.0.0 버전 까지 지원
library(ROracle)
install.packages("ROracle")  # R 4.0.0 버전 까지 지원
### 방법2
remove.packages('rJava')
remove.packages('DBI')
remove.packages('RJDBC')
install.packages('rJava')
install.packages('DBI')
install.packages('RJDBC')
library(rJava)
library(DBI)
library(RJDBC)
classPath <- "C:/LSY/lib/ojdbc8.jar"
driver <- JDBC(driverClass = "oracle.jdbc.driver.OracleDriver"
, classPath = classPath)
conn <- dbConnect(driver,
"jdbc:oracle:thin:@//localhost:1521/orcl",
"human",
"123456")
sql <- "SELECT * FROM board"
result <- dbGetQuery(conn, sql)
View(result)
names(result)
# 데이터 프레임 -> 테이블에 추가
dbWriteTable(conn, "test", value = data, overwrite=TRUE)
# 연결 종료
dbDisconnect(conn)
# :
x <- c(1:10)
print(x)
# 숫자형 벡터 생성
ex_vector <- c(-1,0,1)
ex_vector
x <- c ( 1 : 10 )
print(x)
print ( x )
# 리스트 생성
list_data <- list(1,2,3,"A","B","C", c(4:6))
list_data
# 데이터 프레임 생성
ID <- c(1:5)
SEX <- c("F","M","F","M","M")
AGE <- c(50,20,28,30,42)
AREA <- c("서울","경기","제주","강원","서울")
dataframe_ex <- data.frame(ID,SEX,AGE,AREA)
dataframe_ex
A <- c("ID", 1, 2, 3, 4)
B <- c("NAME", "김휴먼", "박휴먼", “황휴먼”, “권휴먼”)
C <- c("AREA", "서울“, ”인천“, ”경기“, ”평양“)
A <- c("ID", 1, 2, 3, 4)
A <- c("ID", 1, 2, 3, 4)
B <- c("NAME", "김휴먼", "박휴먼", “황휴먼”, “권휴먼”)
B <- c("NAME", "김휴먼", "박휴먼", "황휴먼”, “권휴먼”)
C <- c("AREA", "서울“, ”인천“, ”경기“, ”평양“)
dataframe <- data.frame(A, B, C)
dataframe
A <- c("ID", 1, 2, 3, 4)
B <- c("NAME", "김휴먼", "박휴먼", "황휴먼", "권휴먼")
C <- c("AREA", "서울", "인천", "경기", "평양")
dataframe <- data.frame(A, B, C)
dataframe
x <- 1
y <- 2
z <- 3
sum <- x + y + x
print(sum)
x <- 1
y <- 2
z <- 3
sum <- x+y+x
print(sum)
x <- 1
y <- 2
z <- 3
sum <- x+y+x
print(sum)
# 배열 생성
y <- c(1,2,3,4,5,6)
# 2행 2열 3차원 배열 생성
array(y,dim=c(2,2,3))
a <- sum(1,2,3,4,5)
print(a)
x <- 1
y <- 2
z <- 3
a <- sum(x,y,z)
print(a)
# R 데이터 저장하기
## 함수 : save(데이터셋, file="파일경로")
path <- "C:/LSY/R/code/sample/"
file <- paste0(path, "read_csv.csv")
library(readxl)
path <- "C:/LSY/R/code/sample/"
# col_names : 헤더 속성 여부
excel_data <- read_excel(paste0(path, "read_excel.xlsx"), col_names = FALSE)
str(excel_data)
mode(excel_data)
# R 데이터 불러오기
path <- "C:/LSY/R/code/export/"
file <- paste0(path, "sample.rda")
load(file)
# csv 파일 저장하기
## 함수 : writer.csv(데이터셋, file="파일경로")
x <- c(1,2,3,4,5)
y <- c("A","B","C","D","E")
DATA <- data.frame(ID = x, NAME = y)
path <- "C:/LSY/R/code/export/"
file <- paste0(path, "writer_csv.csv")
write.csv(DATA, file=file)
path <- "C:/LSY/R/code/sample/"
# col_names : 헤더 속성 여부
excel_data <- read_excel(paste0(path, "read_excel.xlsx"), col_names = FALSE)
str(excel_data)
mode(excel_data)
# 컬럼명 지정
names(excel_data) <- c("ID","NAME")
View(excel_data)
# col_names : 헤더 속성 여부
excel_data <- read_excel(paste0(path, "read_excel.xlsx"), col_names = FALSE)
library(readxl)
path <- "C:/LSY/R/code/source/"
excel_data <- read_excel(paste0(path,"data_ex.xlsx"))
print(excel_data)
print(excel_data)
View(excel_data)
dust_data_select <- dust_data[,c("날짜","성북구","중구")]
library(dplyr)
dust_data_select <- dust_data[,c("날짜","성북구","중구")]
library(readxl)
path <- "C:/LSY/R/code/source/"
file <- paste0(path, "dust.xlsx")
dust_data <- read_excel(file)
head(dust_data)
library(dplyr)
dust_data_select <- dust_data[,c("날짜","성북구","중구")]
View(dust_data_select)
library(dplyr)
dust_data_select <- dust_data[,c("날짜","성북구","중구")]
View(dust_data_select)
library(readxl)
path <- "C:/LSY/R/code/source/"
file <- paste0(path, "dust.xlsx")
dust_data <- read_excel(file)
head(dust_data)
library(dplyr)
dust_data <- dust_data[,c("날짜", "마포구", "강남구")]
View(dust_data)
library(ggplot2)
# 상자 그림 그래프
ggplot(airquality, aes(x=Day,y=Temp,group=Day)) +
geom_boxplot(width=0.8
, fill="pink"
, color="purple"
, outlier.shape=8
, outlier.color="red")
# 미세먼지 단위 : 마이크로 그램 (㎍/m3)
# 1g = 1000mg
# 1mg = 1000㎍
# 1㎍ = 0.0000001g
# 40㎍ = 0.000004g
# 성북구와 중구 미세먼지 농도 상자 그림 그리기
boxplot( dust_data_select$성북구, dust_data_select$중구,
main = "finedust", xlab = "AREA", names = c("성북구", "중구"),
ylab = "FINEDUST_PM", col = c("blue", "green"))
# 미세먼지 단위 : 마이크로 그램 (㎍/m3)
# 1g = 1000mg
# 1mg = 1000㎍
# 1㎍ = 0.0000001g
# 40㎍ = 0.000004g
# 성북구와 중구 미세먼지 농도 상자 그림 그리기
boxplot( dust_data_select$성북구, dust_data_select$중구,
main = "finedust", xlab = "AREA", names = c("성북구", "중구"),
)
# 미세먼지 단위 : 마이크로 그램 (㎍/m3)
# 1g = 1000mg
# 1mg = 1000㎍
# 1㎍ = 0.0000001g
# 40㎍ = 0.000004g
# 성북구와 중구 미세먼지 농도 상자 그림 그리기
boxplot( dust_data_select$성북구, dust_data_select$중구,
main = "finedust", xlab = "AREA", names = c("성북구", "중구"),
ylab = "FINEDUST_PM")
ID <- c(1:4)
NAME <- c("김휴먼", "박휴먼", "황휴먼", "권휴먼")
AREA <- c("서울", "인천", "경기", "평양")
dataframe <- data.frame(ID, NAME, AREA)
dataframe
# 미세먼지 단위 : 마이크로 그램 (㎍/m3)
# 1g = 1000mg
# 1mg = 1000㎍
# 1㎍ = 0.0000001g
# 40㎍ = 0.000004g
# 성북구와 중구 미세먼지 농도 상자 그림 그리기
boxplot( dust_data_select$성북구, dust_data_select$중구,
)
# 미세먼지 단위 : 마이크로 그램 (㎍/m3)
# 1g = 1000mg
# 1mg = 1000㎍
# 1㎍ = 0.0000001g
# 40㎍ = 0.000004g
# 성북구와 중구 미세먼지 농도 상자 그림 그리기
boxplot( dust_data_select$성북구, dust_data_select$중구,
main = "finedust", xlab = "AREA", names = c("성북구", "중구"),
ylab = "FINEDUST_PM")
# 지역별 미세먼지 농도 분산 차이 검정하기
var.test( dust_data_select$중구, dust_data_select$성북구 )
# 지역별 평균 차이 검정하기
t.test( dust_data_select$중구, dust_data_select$성북구, var.equal = T )
# 지역별 평균 차이 검정하기
t.test( dust_data_select$중구, dust_data_select$성북구, var.equal = T )
t.test( dust_data$마포구, dust_data$강남구, var.equal = T )
head(dust_data)
library(readxl)
path <- "C:/LSY/R/code/source/"
file <- paste0(path, "dust.xlsx")
dust_data <- read_excel(file)
head(dust_data)
library(readxl)
path <- "C:/LSY/R/code/source/"
file <- paste0(path, "선별진료소.xls")
clinic_data <- read_excel(file)
View(clinic_data)
library(readxl)
path <- "C:/LSY/R/code/source/"
file <- paste0(path, "Oneperson_household.xlsx")
Oneperson_data <- read_excel(file)
View(Oneperson_data)
library(readxl)
path <- "C:/LSY/R/code/source/"
file <- paste0(path, "dust.xlsx")
dust_data <- read_excel(file)
head(dust_data)
View(Oneperson_data)
library(dplyr)
Oneperson_data_select <- Oneperson_data[,c("2021...6","2021...9")]
View(Oneperson_data_select)
View(dust_data_select)
# 결측치 확인
is.na( dust_data_select )         # TRUE : 결측치
library(dplyr)
dust_data_select <- dust_data[,c("날짜","성북구","중구")]
View(dust_data_select)
library(dplyr)
Oneperson_data_select <- Oneperson_data[,c("2021...6"
,"2021...9"
,"2021...12"
,"2021...15"
,"2021...18"
,"2021...21"
,"2021...24"
,"2021...27"
,"2021...30"
,"2021...33"
,"2021...36"
,"2021...39"
,"2021...42"
,"2021...45"
,"2021...48")]
View(Oneperson_data_select)
